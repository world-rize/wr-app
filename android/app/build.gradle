def keystorePropertiesFile = rootProject.file("keystore.properties")

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    // flavors
    flavorDimensions "flavor-type"

    productFlavors {
        development {
            dimension "flavor-type"
            // applicationIdSuffix ".dev"
        }
        staging {
            dimension "flavor-type"
            // applicationIdSuffix ".stg"
        }
        production {
            dimension "flavor-type"
            // applicationIdSuffix ".prd"
        }
    }

    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.worldrize.app"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // <https://github.com/flutter/flutter/issues/47517>
        multiDexEnabled true

        // <https://qiita.com/kasa_le/items/d23075d817f42e869778>
        signingConfigs {
            release {
                // from codemagic env
                if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                    storeFile file(System.getenv()["FCI_BUILD_DIR"] + "/keystore.jks")
                    storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
                    keyAlias System.getenv()["FCI_KEY_ALIAS"]
                    keyPassword System.getenv()["FCI_KEY_PASSWORD"]
                }
                // local
                else if (keystorePropertiesFile.exists()) {
                    def keystoreProperties = new Properties()
                    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                }
            }
        }
    }

    buildTypes {
        debug {
            resValue "string", "app_name", "WR英会話-dev"
            signingConfig signingConfigs.debug
        }
        release {
            resValue "string", "app_name", "WR英会話"
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.mikepenz:aboutlibraries:6.1.1"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // add the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
//    implementation 'com.google.gms:google-services:4.2.0'
//    implementation 'com.google.firebase:firebase-ads:18.0.0'
}

// solution <https://qiita.com/noobar/items/f40fb0e30384020bfb09>
configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}
